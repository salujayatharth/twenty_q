class TwentyQuestionsGame {
    constructor() {
        this.questionsRemaining = 20;
        this.gameActive = false;
        this.currentQuestion = '';
        this.gameHistory = [];
        this.questions = this.getDefaultQuestions();
        this.currentQuestionIndex = 0;
        
        // Load configuration for prompts and messages
        this.config = this.loadGameConfiguration();
        
        this.initializeElements();
        this.bindEvents();
    }

    loadGameConfiguration() {
        // Try to load global configuration if available
        const globalConfig = loadConfiguration();
        if (globalConfig && globalConfig.prompts) {
            return globalConfig;
        }
        
        // Fallback to default prompts if no configuration is available
        return {
            prompts: {
                systemPrompt: `You are an AI playing Twenty Questions as the guesser. Your goal is to guess what the human is thinking of in 20 questions or fewer.

Guidelines for your behavior:
- Ask strategic, yes/no questions that efficiently narrow down possibilities
- Start with broad categorical questions, then get more specific
- Consider the human's previous answers to make intelligent follow-up questions
- Be friendly, engaging, and show enthusiasm for the game
- When you're confident about your guess, make it clearly
- If you can't guess within 20 questions, gracefully concede

Remember: You can only ask questions that can be answered with "Yes", "No", or "Maybe".`,
                welcomeMessage: {
                    title: "Welcome to Twenty Questions!",
                    instruction: "Think of any object, person, place, or concept, then click \"Start Game\" to begin."
                },
                gameStartMessage: "Game started! I'm thinking of my first question...",
                winMessage: "ðŸŽ‰ I won! Thanks for playing!",
                loseMessage: "ðŸ¤” I couldn't guess it! You win this round. What were you thinking of?"
            }
        };
    }

    initializeElements() {
        this.startBtn = document.getElementById('start-btn');
        this.restartBtn = document.getElementById('restart-btn');
        this.gameControls = document.getElementById('game-controls');
        this.answerControls = document.getElementById('answer-controls');
        this.chatContainer = document.getElementById('chat-container');
        this.questionsLeftSpan = document.getElementById('questions-left');
        this.gameStatusSpan = document.getElementById('game-status');
        this.currentQuestionP = document.getElementById('current-question');
        this.funkyCounter = document.getElementById('counter-number');
    }

    bindEvents() {
        this.startBtn.addEventListener('click', () => this.startGame());
        this.restartBtn.addEventListener('click', () => this.restartGame());
    }

    getDefaultQuestions() {
        // A set of intelligent questions for the 20 questions game
        // In a real implementation, this would be generated by an LLM
        return [
            "Is it a living thing?",
            "Is it bigger than a car?",
            "Can you hold it in your hand?",
            "Is it found indoors?",
            "Is it made by humans?",
            "Does it move on its own?",
            "Is it used for entertainment?",
            "Is it electronic?",
            "Can you eat it?",
            "Is it made of metal?",
            "Does it have wheels?",
            "Is it something you wear?",
            "Does it grow in nature?",
            "Is it used for work or business?",
            "Does it make sounds?",
            "Is it colorful?",
            "Can it fly?",
            "Is it found in a kitchen?",
            "Does it require electricity?",
            "Is it something children use?"
        ];
    }

    startGame() {
        this.gameActive = true;
        this.questionsRemaining = 20;
        this.currentQuestionIndex = 0;
        this.gameHistory = [];
        
        this.updateDisplay();
        this.clearChat();
        this.addSystemMessage(this.config.prompts.gameStartMessage);
        
        // Show first question after a short delay
        setTimeout(async () => {
            await this.askNextQuestion();
        }, 1500);
    }

    restartGame() {
        this.gameActive = false;
        this.questionsRemaining = 20;
        this.currentQuestionIndex = 0;
        this.gameHistory = [];
        
        this.updateDisplay();
        this.clearChat();
        this.addWelcomeMessage();
    }

    async askNextQuestion() {
        if (this.questionsRemaining <= 0) {
            this.endGame(false);
            return;
        }

        let question;
        try {
            // Use LLM if available, otherwise fall back to predefined questions
            if (llm) {
                question = await llm.generateQuestion(this.gameHistory);
            } else {
                question = this.getNextIntelligentQuestion();
            }
        } catch (error) {
            console.error('Error generating question:', error);
            question = this.getNextIntelligentQuestion();
        }
        
        this.currentQuestion = question;
        
        this.addAIMessage(question);
        this.currentQuestionP.textContent = question;
        this.updateDisplay();
        
        // Ensure scroll after all DOM updates
        requestAnimationFrame(() => {
            this.scrollToBottom();
        });
    }

    getNextIntelligentQuestion() {
        // Simple logic to pick questions based on previous answers
        // In a real LLM implementation, this would be much more sophisticated
        if (this.currentQuestionIndex < this.questions.length) {
            return this.questions[this.currentQuestionIndex];
        }
        
        // Fallback questions if we run out
        const fallbackQuestions = [
            "Is it commonly found in homes?",
            "Would most people recognize it?",
            "Is it expensive?",
            "Has it been invented in the last 100 years?"
        ];
        
        const fallbackIndex = (this.currentQuestionIndex - this.questions.length) % fallbackQuestions.length;
        return fallbackQuestions[fallbackIndex];
    }

    async answerQuestion(answer) {
        if (!this.gameActive) return;

        this.addUserMessage(answer.toUpperCase());
        this.gameHistory.push({
            question: this.currentQuestion,
            answer: answer
        });

        this.questionsRemaining--;
        this.currentQuestionIndex++;

        // Simple guess logic - in a real implementation, this would use LLM reasoning
        if (this.shouldMakeGuess()) {
            await this.makeGuess();
        } else if (this.questionsRemaining <= 0) {
            this.endGame(false);
        } else {
            // Ask next question after a short delay
            this.addSystemMessage("Thinking...");
            setTimeout(async () => {
                await this.askNextQuestion();
                // Ensure scroll after async question asking
                this.scrollToBottom();
            }, 2000);
        }

        this.updateDisplay();
        // Ensure we scroll to bottom after all DOM operations are complete
        requestAnimationFrame(() => {
            this.scrollToBottom();
        });
    }

    shouldMakeGuess() {
        // Simple heuristic: make a guess if we're running low on questions
        // or if we have enough information (simplified logic)
        return this.questionsRemaining <= 3 || this.gameHistory.length >= 10;
    }

    async makeGuess() {
        let guess;
        try {
            // Use LLM if available, otherwise fall back to random guess
            if (llm) {
                const aiGuess = await llm.makeGuess(this.gameHistory);
                guess = aiGuess;
            } else {
                // Fallback to simple random guess
                const guesses = [
                    "a smartphone",
                    "a book", 
                    "a car",
                    "a computer",
                    "a dog",
                    "a tree",
                    "a chair",
                    "pizza",
                    "a television",
                    "a guitar"
                ];
                guess = guesses[Math.floor(Math.random() * guesses.length)];
            }
        } catch (error) {
            console.error('Error making guess:', error);
            guess = "something interesting";
        }

        this.addAIMessage(`I think I know! Is it ${guess}?`);
        this.currentQuestionP.textContent = `Is it ${guess}?`;
        
        // Create special guess controls
        this.createGuessControls();
        
        // Ensure scroll after DOM modifications
        requestAnimationFrame(() => {
            this.scrollToBottom();
        });
    }

    createGuessControls() {
        const answerControls = document.getElementById('answer-controls');
        answerControls.innerHTML = `
            <p class="current-question">Is my guess correct?</p>
            <div class="answer-buttons">
                <button class="btn btn-yes" onclick="game.handleGuessResult(true)">Yes! You got it!</button>
                <button class="btn btn-no" onclick="game.handleGuessResult(false)">No, keep trying</button>
            </div>
        `;
    }

    handleGuessResult(correct) {
        if (correct) {
            this.addUserMessage("Yes! You got it!");
            this.endGame(true);
        } else {
            this.addUserMessage("No, that's not it");
            if (this.questionsRemaining <= 0) {
                this.endGame(false);
            } else {
                setTimeout(async () => {
                    await this.askNextQuestion();
                    // Ensure scroll after async question asking
                    this.scrollToBottom();
                }, 1500);
            }
        }
        // Ensure we scroll to bottom after all DOM operations are complete
        requestAnimationFrame(() => {
            this.scrollToBottom();
        });
    }

    endGame(won) {
        this.gameActive = false;
        
        if (won) {
            this.addSystemMessage(this.config.prompts.winMessage);
            this.gameStatusSpan.textContent = "Game Over - AI Wins!";
        } else {
            this.addSystemMessage(this.config.prompts.loseMessage);
            this.gameStatusSpan.textContent = "Game Over - You Win!";
        }

        this.showGameControls();
    }

    addAIMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message ai-message';
        messageDiv.textContent = `ðŸ¤– ${message}`;
        this.chatContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    addUserMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message user-message';
        messageDiv.textContent = `You: ${message}`;
        this.chatContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    addSystemMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message system-message';
        messageDiv.textContent = message;
        this.chatContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    clearChat() {
        this.chatContainer.innerHTML = '';
    }

    addWelcomeMessage() {
        this.chatContainer.innerHTML = `
            <div class="welcome-message">
                <p>${this.config.prompts.welcomeMessage.title}</p>
                <p>${this.config.prompts.welcomeMessage.instruction}</p>
            </div>
        `;
    }

    isScrolledToBottom() {
        const threshold = 5; // Small threshold to account for rounding errors
        // If content doesn't exceed container height, we're always considered "at bottom"
        if (this.chatContainer.scrollHeight <= this.chatContainer.clientHeight) {
            return true;
        }
        return this.chatContainer.scrollTop + this.chatContainer.clientHeight >= 
               this.chatContainer.scrollHeight - threshold;
    }

    scrollToBottom() {
        // Only auto-scroll if user is already at or near the bottom
        if (this.isScrolledToBottom()) {
            this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
        }
    }

    forceScrollToBottom() {
        // Force scroll to bottom regardless of current position
        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
    }

    updateDisplay() {
        this.questionsLeftSpan.textContent = this.questionsRemaining;
        
        // Update funky counter to show questions asked (20 - remaining)
        const questionsAsked = 20 - this.questionsRemaining;
        this.funkyCounter.textContent = questionsAsked;
        
        if (this.gameActive) {
            this.gameStatusSpan.textContent = "Game in progress...";
            this.showAnswerControls();
        } else {
            this.showGameControls();
        }
    }

    showGameControls() {
        this.gameControls.style.display = 'block';
        this.answerControls.style.display = 'none';
        this.startBtn.style.display = 'inline-block';
        this.restartBtn.style.display = 'inline-block';
    }

    showAnswerControls() {
        this.gameControls.style.display = 'none';
        this.answerControls.style.display = 'block';
        
        // Restore default answer controls if they were modified for guessing
        if (!this.answerControls.innerHTML.includes('btn-maybe')) {
            this.answerControls.innerHTML = `
                <p class="current-question" id="current-question">${this.currentQuestion}</p>
                <div class="answer-buttons">
                    <button class="btn btn-yes" onclick="answerQuestion('yes')">Yes</button>
                    <button class="btn btn-no" onclick="answerQuestion('no')">No</button>
                    <button class="btn btn-maybe" onclick="answerQuestion('maybe')">Maybe</button>
                </div>
            `;
        }
    }
}

// Global functions for button clicks
async function answerQuestion(answer) {
    await game.answerQuestion(answer);
}

// Initialize the game when the page loads
let game;
document.addEventListener('DOMContentLoaded', function() {
    game = new TwentyQuestionsGame();
});

// LLM Integration with OpenAI API
class LLMIntegration {
    constructor(apiKey, provider = 'openai', model = 'gpt-3.5-turbo') {
        this.apiKey = apiKey;
        this.provider = provider;
        this.model = model;
        this.apiUrl = 'https://api.openai.com/v1/chat/completions';
    }

    async generateQuestion(gameHistory) {
        try {
            const config = loadConfiguration();
            const systemPrompt = config?.prompts?.systemPrompt || 
                'You are an AI playing Twenty Questions as the guesser. Ask strategic yes/no questions to guess what the human is thinking of.';

            // Build context from game history
            let context = systemPrompt + '\n\nGame History:\n';
            if (gameHistory.length === 0) {
                context += 'No questions have been asked yet. Start with a broad categorical question.';
            } else {
                gameHistory.forEach((entry, index) => {
                    context += `Q${index + 1}: ${entry.question}\nA${index + 1}: ${entry.answer}\n`;
                });
                context += '\nBased on the above answers, ask your next strategic yes/no question to narrow down the possibilities.';
            }

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify({
                    model: this.model,
                    messages: [
                        {
                            role: 'system',
                            content: context
                        },
                        {
                            role: 'user',
                            content: 'Ask your next question. Respond with only the question, nothing else.'
                        }
                    ],
                    max_tokens: 50,
                    temperature: 0.7
                })
            });

            if (!response.ok) {
                throw new Error(`API request failed: ${response.status}`);
            }

            const data = await response.json();
            return data.choices[0].message.content.trim();
        } catch (error) {
            console.error('LLM API Error:', error);
            // Fallback to intelligent default question
            return this.getFallbackQuestion(gameHistory);
        }
    }

    async makeGuess(gameHistory) {
        try {
            const config = loadConfiguration();
            const systemPrompt = config?.prompts?.systemPrompt || 
                'You are an AI playing Twenty Questions as the guesser. Make your best guess based on the answers provided.';

            let context = systemPrompt + '\n\nGame History:\n';
            gameHistory.forEach((entry, index) => {
                context += `Q${index + 1}: ${entry.question}\nA${index + 1}: ${entry.answer}\n`;
            });
            context += '\nBased on all the above answers, make your best guess about what the human is thinking of. Respond with only your guess, nothing else.';

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify({
                    model: this.model,
                    messages: [
                        {
                            role: 'system',
                            content: context
                        },
                        {
                            role: 'user',
                            content: 'Make your final guess. What am I thinking of?'
                        }
                    ],
                    max_tokens: 30,
                    temperature: 0.5
                })
            });

            if (!response.ok) {
                throw new Error(`API request failed: ${response.status}`);
            }

            const data = await response.json();
            return data.choices[0].message.content.trim();
        } catch (error) {
            console.error('LLM API Error:', error);
            // Fallback to a generic guess
            return "I'm having trouble connecting to my AI brain, but based on your answers, I'll guess it's something interesting!";
        }
    }

    getFallbackQuestion(gameHistory) {
        // Intelligent fallback questions based on game history length
        const fallbackQuestions = [
            "Is it a living thing?",
            "Is it bigger than a car?",
            "Can you hold it in your hand?",
            "Is it found indoors?",
            "Is it made by humans?",
            "Does it move on its own?",
            "Is it used for entertainment?",
            "Is it electronic?",
            "Can you eat it?",
            "Is it made of metal?"
        ];
        
        const questionIndex = gameHistory.length % fallbackQuestions.length;
        return fallbackQuestions[questionIndex];
    }
}

// Load configuration with environment variable support
function loadConfiguration() {
    // Try to load config.js if it exists (browser environment)
    if (typeof window !== 'undefined') {
        // In browser, config should be loaded via script tag or other means
        return typeof gameConfiguration !== 'undefined' ? gameConfiguration : null;
    }
    
    // In Node.js environment, try to require config
    try {
        if (typeof require !== 'undefined') {
            return require('./config.js');
        }
    } catch (e) {
        // Fallback to example config structure with environment variable
        return {
            llm: {
                provider: 'openai',
                apiKey: (typeof process !== 'undefined' && process.env && process.env.OPENAI_API_KEY) || 'your-api-key-here',
                model: 'gpt-3.5-turbo'
            }
        };
    }
    
    return null;
}

// Initialize LLM integration if configuration is available
let llm = null;
const config = loadConfiguration();
if (config && config.llm && config.llm.apiKey && config.llm.apiKey !== 'your-api-key-here') {
    llm = new LLMIntegration(config.llm.apiKey, config.llm.provider, config.llm.model);
}